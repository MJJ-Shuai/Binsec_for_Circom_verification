rdx := nondet as src2            ## initialize the first argument
rsi := nondet as src            ## initialize the second argument
rdi := nondet as dst
assume src2 & 0b111 = 0          ## alignment constraint
assume src & 0b111 = 0          ## alignment constraint
assume dst & 0b111 = 0
assume 0x3000 <= src2 <= 0x4000  ## arbitrary range  
assume 0x5000 <= src <= 0x6000  ## arbitrary range  
assume 0x7000 <= dst <= 0x8000
starting from <add_s1s2> with
    assume 0x7ffff000000 <= rsp <= 0x7ffff800000 
    #assume 0 <=u rdx <=u 0xffffffffffffffff
    #assume 0 <= rdx <= 0x0000000000000100

    assume @[src, 40] = 0x00000000000000000000000000000000000000000000000000000000000000010000000080000000
    assume @[src2, 40] = 0x000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFF
    #assume @[src1, 40]{63} = 0
    #assume @[src, 40]{63} = 0
    #assume @[src2, 40] = 0x07359fa88c59c9e89f6e5c105a695dd60d0e939ee8c1e556e4a771fc5ab5b8ba0000000001000000
    #assume @[src+8, 32] = 0x0000000000000000000000000000000000000000000000000000000000000000
    #assume @[src2+8, 32] = 0x0000000000000000000000000000000000000000000000000000000000000000
    @[rsp, 8] := <add_s1s2:last>
    q[0, 32] := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
    @[0x7ffff8aaaa1, 8] := <rawCopyS2L>
    temp1[0,4] := @[src,4]
    temp2[0,4] := @[src2,4]
end
replace <rawCopyS2L> by
    @[dst, 8] := 0x8000000000000000
    print @[src,8]
    if (@[src,8] & 0x8000000000000000) = 0 then
        @[dst + 8, 8] := @[src,8]
        @[dst + 16, 8] := 0
        @[dst + 24, 8] := 0
        @[dst + 32, 8] := 0
    else
      print sext256 @[src,8]
        #eq := eq && @[dst + 8, 32] - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 = src<256>
        @[dst + 8, 32] := sext256 @[src,8] + 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 
    end
    return
end

replace <add_s1s2:last> by
  #print (sext64 temp1[0,4] + sext64 temp2[0,4])
  eq<1> := true
  noover<1> := true
  result[0,4] := (temp1[0,4] + temp2[0,4])
  if temp1[0,4]{31} = 0 && temp2[0,4]{31} = 0 then
    if result[0,4]{31} = 1 then
      noover := false
    end
  end
  if temp1[0,4]{31} = 1 && temp2[0,4]{31} = 1 then
    if result[0,4]{31} = 0 then
      noover := false
    end
  end
  if noover then
    eq := eq && @[dst, 8] = uext64 (temp1[0,4] + temp2[0,4])
  else
    eq := eq && @[src, 8] = sext64 temp1[0,4] + sext64 temp2[0,4]
    eq := eq && (@[dst, 8] = 0x8000000000000000)
    if (@[src,8] & 0x8000000000000000) = 0 then
      eq := eq && @[dst + 8, 8] = @[src,8] && @[dst + 16, 8] = 0 && @[dst + 24, 8] = 0 && @[dst + 32, 8] = 0
    else
      #eq := eq && @[dst + 8, 32] - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 = src<256>
      eq := eq && @[dst + 8, 32] - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 = sext256 @[src,8]
    end
  end   
  print @[dst,40]
  if eq = false then
    print uext64 (temp1[0,4] + temp2[0,4])
    print uext64 temp1[0,4] + uext64 temp2[0,4]
  end
  assert eq
  halt

end

explore all
#jo 指令检查的是溢出标志（OF）
#产生的结果虽然超出了 32 位范围，但不会导致有符号数溢出，因此 OF 不会被设置。