rdx := nondet as dst            ## initialize the first argument
rsi := nondet as src            ## initialize the second argument

assume dst & 0b111 = 0          ## alignment constraint
assume src & 0b111 = 0          ## alignment constraint

assume 0x4000 <= dst <= 0x5000  ## arbitrary range  
assume 0x5000 <= src <= 0x6000  ## arbitrary range  

starting from <Fr_rlt> with
    assume 0x7ffff000000 <= rsp <= 0x7ffff800000 
    #assume @[src+8, 32] = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000
    #assume @[dst+8, 32] = 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb8480000000000000000
    #assume @[src+8, 32] = 0x0000000000000000000000000000000000000000000000000000000000000000
    #assume @[dst+8, 32] = 0x0000000000000000000000000000000000000000000000000000000000000000

    assume @[src, 8]{63} = 1
    assume @[dst, 8]{63} = 1
    #assume @[src, 8] = 0x7fffffff00000000
    #assume @[dst, 8] = 0x7fffffffffffffff
    @[rsp, 8] := <Fr_rlt:last>
    @[0x7ffff820001, 8] := <Fr_toLongNormal>
    @[0x7ffff800001, 8] := <Fr_toNormal>
    @[0x7ffff810001, 8] := <rltL1L2>  
    half[0,32] := 0x183227397098d014dc2822db40c0ac2e9419f4243cdcb848a1f0fac9f8000000
    q[0, 32] := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
    R[0, 32] := 0x0e0a77c19a07df2f666ea36f7879462e36fc76959f60cd29ac96341c4ffffffb
    Rr[0, 32]:= 0x15ebf95182c5551cc8260de4aeb85d5d090ef5a9e111ec87dc5ba0056db1194e
    reversesrc[0,64] := uext512 @[src+8, 32] * uext512 Rr[0, 32] % uext512 q[0, 32]
    reversedst[0,64] := uext512 @[dst+8, 32] * uext512 Rr[0, 32] % uext512 q[0, 32]
end
replace <Fr_toLongNormal> by
   if @[src, 8]{63} = 0 then
    @[src, 8] := 0x8000000000000000
    if (@[src, 4]{31}) = 0 then
        @[src + 8, 4] := @[src, 4]
        @[src + 12, 4] := 0
        @[src + 16, 8] := 0
        @[src + 24, 8] := 0
        @[src + 32, 8] := 0
    else
        @[src + 8, 32] := sext256 @[src, 4] + 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
    end
   end
   if @[dst, 8]{63} = 0 then
    @[dst, 8] := 0x8000000000000000
    if (@[dst, 4]{31}) = 0 then
        @[dst + 8, 4] := @[dst, 4]
        @[dst + 12, 4] := 0
        @[dst + 16, 8] := 0
        @[dst + 24, 8] := 0
        @[dst + 32, 8] := 0
    else
        @[dst + 8, 32] := sext256 @[dst, 4] + 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 
    end
   end
end
replace <Fr_toNormal> by
   if @[src, 8]{62} = 0 && @[src, 8]{62} = 1 then
    @[src, 40] := @[src, 40] #N || S
   end
   if @[src, 8]{63} = 1 && @[src, 8]{62} = 1 then # M & L
    @[src + 8, 32] := reversesrc[0,32]
    @[src, 8] := 0x8000000000000000
   end
   if @[dst, 8]{62} = 0 && @[dst, 8]{62} = 1 then
    @[dst, 40] := @[dst, 40] #N || S
   end
   if @[dst, 8]{63} = 1 && @[dst, 8]{62} = 1 then # M & L
    @[dst + 8, 32] := reversedst[0,32]
    @[dst, 8] := 0x8000000000000000
   end
   
end
replace <rltL1L2> by
   if @[src+8, 32] > half[0,32] then
    if @[dst+8, 32] > half[0,32] then
        if @[src+8, 32] < @[dst+8, 32] then
            rax := 0x0000000000000001
        else
            rax := 0x0000000000000000
        end
    else
        rax := 0x0000000000000001
    end
  end
  if @[src+8, 32] <= half[0,32] then
    if @[dst+8, 32] <= half[0,32] then
        if @[src+8, 32] < @[dst+8, 32] then
            rax := 0x0000000000000001
        else
            rax := 0x0000000000000000
        end
    else
        rax := 0x0000000000000000
    end
  end
    print rax
    print @[src+8,32]
    print @[dst+8,32]
end
replace <Fr_rlt:last> by
  eq<1> := true
  if @[src, 8]{63} = 0 && @[dst, 8]{63} = 0 then
    if @[src, 4] <s @[dst, 4] then
        eq := eq && rax = 1
    else
        eq := eq && rax = 0
    end
  else
    if @[src+8, 32] > half[0,32] then
        if @[dst+8, 32] > half[0,32] then
            if @[src+8, 32] < @[dst+8, 32] then
                eq := eq && rax = 1
            else
                eq := eq && rax = 0
            end
        else
            eq := eq && rax = 1
        end
    end
    if @[src+8, 32] <= half[0,32] then
        if @[dst+8, 32] <= half[0,32] then
            if @[src+8, 32] < @[dst+8, 32] then
                eq := eq && rax = 1
            else
                eq := eq && rax = 0
            end
        else
            eq := eq && rax = 0
        end
    end
  end 

  assert eq
  halt
end

explore all