rdi := nondet as dst
rsi := nondet as src1


assume dst & 0b111 = 0          
assume src1 & 0b111 = 0  
              
assume 0x1000 <= dst <= 0x2000  
assume 0x3000 <= src1 <= 0x4000  ## arbitrary range  


starting from <Fr_toMontgomery> with
    #assume @[src1, 32]{255} = 0
    #assume @[src1, 32] = 0x274b96d329e3b4496847f1dc39601d16fc07ee5f0a8e418e2d8c8a81c6c46537
    assume @[src1, 40] = 0x000000000000000000000000000012340000000000000000000000000000000100000000e0000000
    #assume @[src1, 40] = 0x00000000000000000000000000001234000000000000000000000000000000014000000071234561
    #assume @[src1, 40]{62} = 0
    #assume @[src1, 40]{63} = 0
    #assume @[src1, 40]{8} = 0
    assume 0x7ffff000000 <= rsp <= 0x7ffff800000
    q[0, 32] := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
    R[0, 32] := 0x0e0a77c19a07df2f666ea36f7879462e36fc76959f60cd29ac96341c4ffffffb 
    R2[0,32] := 0x0216d0b17f4e44a58c49833d53bb808553fe3ab1e35c59e31bb8e645ae216da7
    eq<1> := true
    @[rsp, 8] := <Fr_toMontgomery:last>   
    @[0x7ffff800001, 8] := <Fr_rawMMul>
    @[0x7ffff82fff1, 8] := <Fr_rawMMul1>
end

replace <Fr_rawMMul> by
    Mon[0,64] := (uext512 @[src1 + 8, 32] * uext512 R[0,32]) % uext512 q[0, 32]
    @[dst + 8, 32] := Mon[0, 32]
end
replace <Fr_rawMMul1> by
    Mon[0,64] := (uext512 rdx * uext512 R[0,32]) % uext512 q[0, 32]
    @[dst + 8, 32] := Mon[0, 32]
    print rdx
    print @[dst, 40]
end
replace <Fr_toMontgomery:last> by
   
   #0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
   print @[src1, 40]
   if @[src1, 8]{62} = 1 then
    print @[dst, 40]
    eq := eq && @[dst, 40] = @[src1, 40] #M
   end

   if @[src1, 8]{62} = 0 && @[src1, 8]{63} = 0 && @[src1, 8]{31} = 0 then
    print @[dst, 40]
    eq := eq && @[dst, 4] = @[src1, 4] #N&S&P
    eq := eq && @[dst+4, 4] = 0x40000000 #虽然是short数据，但是他的蒙哥马利形式依然是高32字节
    eq := eq && @[dst + 8, 32] = Mon[0, 32]
   end

    if @[src1, 8]{62} = 0 && @[src1, 8]{63} = 0 && @[src1, 8]{31} = 1 then#N&S&N
        print @[dst, 40]
        eq := eq && @[dst, 4] = @[src1, 4] #N&S&n
        eq := eq && @[dst+4, 4] = 0x40000000
        if Mon[0, 32] = 0 then
            eq := eq && @[dst + 8, 32] = 0
        else
            eq := eq && @[dst + 8, 32] = 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 - Mon[0, 32]
        end
    end

    if @[src1, 8]{62} = 0 && @[src1, 8]{63} = 1 then
        print @[dst, 40]
        eq := eq && @[dst, 4] = @[src1, 4] #N&L
        eq := eq && @[dst+4, 4] = 0xC0000000
        result[0, 64] := uext512 R[0, 32] * uext512 @[src1+8, 32]
        eq := eq && uext512 @[dst+8, 32] % uext512 q[0, 32] = result[0, 64] % uext512 q[0, 32]
    end
  assert eq
  halt
end

explore all