rsi := nondet as src            ## initialize the second argument
rdi := nondet as dst

assume src & 0b111 = 0          ## alignment constraint
assume dst & 0b111 = 0

assume 0x5000 <= src <= 0x6000  ## arbitrary range  
assume 0x7000 <= dst <= 0x8000

starting from <square_s1> with
    assume 0x7ffff000000 <= rsp <= 0x7ffff800000 
    #assume @[src, 40] = 0x0000000000000000000000000000000000000000000000000000000000000001ffffffff87654321
    
    @[rsp, 8] := <square_s1:last>
    q[0, 32] := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
    @[0x7ffff8aaaa1, 8] := <rawCopyS2L>
    temp1[0,4] := @[src,4]
end
replace <rawCopyS2L> by
    @[dst, 8] := 0x8000000000000000

    if (@[src,8] & 0x8000000000000000) = 0 then
        @[dst + 8, 8] := @[src,8]
        @[dst + 16, 8] := 0
        @[dst + 24, 8] := 0
        @[dst + 32, 8] := 0
    else
        #eq := eq && @[dst + 8, 32] - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 = src<256>
        @[dst + 8, 32] := sext256 @[src,8] + 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 
    end
    return
end

replace <square_s1:last> by
  eq<1> := true
    eq := eq && @[src, 8] = sext64 temp1[0,4] * sext64 temp1[0,4]
    eq := eq && (@[dst, 8] = 0x8000000000000000)
    if (@[src,8] & 0x8000000000000000) = 0 then
      eq := eq && @[dst + 8, 8] = @[src,8] && @[dst + 16, 8] = 0 && @[dst + 24, 8] = 0 && @[dst + 32, 8] = 0
    else
      #eq := eq && @[dst + 8, 32] - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 = src<256>
      eq := eq && @[dst + 8, 32] - 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001 = sext256 @[src,8]
    end  

  if eq = false then
    print temp1[0,4]
    print @[dst,40]
    print @[src,8]
  end
  assert eq
  halt

end

explore all