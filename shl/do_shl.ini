rdi := nondet as dst            ## initialize the first argument
rsi := nondet as src            ## initialize the second argument

assume dst & 0b111 = 0          ## alignment constraint
assume src & 0b111 = 0          ## alignment constraint

assume 0x3000 <= dst <= 0x4000  ## arbitrary range  
assume 0x5000 <= src <= 0x6000  ## arbitrary range  

starting from <do_shl> with
    assume 0x7ffff000000 <= rsp <= 0x7ffff800000 
    #assume @[src, 40] = 0x00000000000000000000000000000000000000000000000000000000000000008000000000000000

    #assume @[dst, 40] = 0x07359fa88c59c9e89f6e5c105a695dd60d0e939ee8c1e556e4a771fc5ab5b8ba0000000001000000
    #assume @[src+8, 32] = 0x0000000000000000000000000000000000000000000000000000000000000000
    #assume @[dst+8, 32] = 0x0000000000000000000000000000000000000000000000000000000000000000
    assume @[src, 8]{63} = 0
    @[rsp, 8] := <do_shl:last>
    @[0x7ffff8aaaa1, 8] := <Fr_toLongNormal>
    @[0x7ffff8baaa1, 8] := <Fr_toNormal>
    @[0x7ffff8caaa1, 8] := <rawShl>

    q[0, 32] := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001

    Rr[0, 32]:= 0x15ebf95182c5551cc8260de4aeb85d5d090ef5a9e111ec87dc5ba0056db1194e
    reverse[0,64] := uext512 @[src+8, 32] * uext512 Rr[0, 32] % uext512 q[0, 32]
    
end

replace <Fr_toLongNormal> by
    if @[src, 40]{63} = 0 then
        if @[src, 4]{31} = 1 then
            @[src + 8, 32] := sext256 @[src, 4] + q[0, 32]
        else
            @[src + 8, 4] := @[src, 4]
            @[src + 12, 4] := 0
            @[src + 16, 8] := 0
            @[src + 24, 8] := 0
            @[src + 32, 8] := 0
        end

        @[src, 8] := 0x8000000000000000
    end
    return
end

replace <Fr_toNormal> by
    if @[src, 8]{63} = 1 && @[src, 8]{62} = 1 then # M & L
        @[src + 8, 32] := reverse[0, 32]
        @[src, 8] := 0x8000000000000000
    end
    return
end

replace <rawShl> by
    temp<256> := uext256 rdx
    if rdx = 0 then
        @[dst + 8, 32] := @[src + 8, 32]
    end
    if rdx >= 254 then
        @[dst + 8, 32] := 0
    end
    if 0 < rdx < 254 then
        if (@[src + 8, 32] lsl temp) >= q[0, 32] then
            before[0, 32] := @[src + 8, 32] lsl temp
            mask[0, 8] := 0x3fffffffffffffff
            before[24, 8] := mask[0, 8] & before[24, 8]

            after[0, 32] := (@[src + 8, 32] lsl temp) - q[0, 32]
            after[24, 8] := mask[0, 8] & after[24, 8]
            if before[0,32] >= q[0, 32] then
                @[dst + 8, 32] := after[0,32]
            else
                @[dst + 8, 32] := before[0,32]
            end       
        end
        if (@[src + 8, 32] lsl temp) < q[0, 32] then
            @[dst + 8, 32] := (@[src + 8, 32] lsl temp)
        end
    end   
    return
end
replace <do_shl:last> by
  eq<1> := true
  if @[src, 40]{63} = 0 then
    
    eq := eq && uext64 @[dst, 4] =(uext64 @[src, 4]) lsl rdx
  end
  if @[src, 40]{63} = 1 then
    eq := eq && @[dst + 4, 4] = 0x80000000
    temp<256> := uext256 rdx
    if rdx = 0 then
        eq := eq && @[src + 8, 32] = @[dst + 8, 32]
    end
    if rdx >= 254 then
        eq := eq && @[dst + 8, 32] = 0
    end
    if 0 < rdx < 254 then
        if (@[src + 8, 32] lsl temp) >= q[0, 32] then
            before[0, 32] := @[src + 8, 32] lsl temp
            mask[0, 8] := 0x3fffffffffffffff
            before[24, 8] := mask[0, 8] & before[24, 8]

            after[0, 32] := (@[src + 8, 32] lsl temp) - q[0, 32]
            after[24, 8] := mask[0, 8] & after[24, 8]
            if before[0,32] >= q[0, 32] then
                eq := eq && after[0,32] = @[dst + 8, 32]
            else
                eq := eq && before[0,32] = @[dst + 8, 32]
            end       
        end
        if (@[src + 8, 32] lsl temp) < q[0, 32] then
            eq := eq && (@[src + 8, 32] lsl temp) = @[dst + 8, 32]
        end
    end 
  end

  if eq = false then
    print @[src, 40]
    print rdx
    print @[dst, 40]
  end  
  assert eq
  halt
end

explore all