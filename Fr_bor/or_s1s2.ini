rdx := nondet as src2            ## initialize the first argument
rsi := nondet as src            ## initialize the second argument
rdi := nondet as dst
assume src2 & 0b111 = 0          ## alignment constraint
assume src & 0b111 = 0          ## alignment constraint
assume dst & 0b111 = 0
assume 0x3000 <= src2 <= 0x4000  ## arbitrary range  
assume 0x5000 <= src <= 0x6000  ## arbitrary range  
assume 0x7000 <= dst <= 0x8000
starting from <or_s1s2> with
    assume 0x7ffff000000 <= rsp <= 0x7ffff800000 
    #assume 0 <=u rdx <=u 0xffffffffffffffff
    #assume 0 <= rdx <= 0x0000000000000100

    #assume @[src, 40] = 0x000000000000000000000000000000000000000000000000000000000000000100000000f0001234
    #assume @[src1, 40] = 0x000000000000000000000000000000000000000000000000000000000000000100000000f0001234
    #assume @[src1, 40]{63} = 0
    #assume @[src, 40]{63} = 0
    #assume @[src2, 40] = 0x07359fa88c59c9e89f6e5c105a695dd60d0e939ee8c1e556e4a771fc5ab5b8ba0000000001000000
    #assume @[src+8, 32] = 0x0000000000000000000000000000000000000000000000000000000000000000
    #assume @[src2+8, 32] = 0x0000000000000000000000000000000000000000000000000000000000000000
    @[rsp, 8] := <or_s1s2:last>
    q[0, 32] := 0x30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001
    @[0x7ffff8aaaa1, 8] := <Fr_toLongNormal>
    temp1[0,40] := @[src,40]
    temp2[0,40] := @[src2,40]
end
replace <Fr_toLongNormal> by

    if @[src, 40]{63} = 0 && @[src, 4]{31} = 1 then
        @[src + 8, 32] := sext256 @[src, 4] + q[0, 32]
        @[src, 8] := 0x8000000000000000
    end
    if @[src2, 40]{63} = 0 && @[src2, 4]{31} = 1 then
        @[src2 + 8, 32] := sext256 @[src2, 4] + q[0, 32]
        @[src2, 8] := 0x8000000000000000
    end
    return
end

replace <or_s1s2:last> by
  eq<1> := true
  if temp1[0,40]{31} = 0 && temp2[0,40]{31} = 0 then
    result[0, 4] := @[src, 4] | @[src2, 4]
    eq := eq && result[0,4] = @[dst, 4]
  end
  if temp1[0,40]{31} = 1 || temp2[0,40]{31} = 1 then
    result[0, 32] := @[src+8, 32] | @[src2+8, 32]
    print @[dst, 40]
    print result[0, 32]
    print result[0, 32] - q[0, 32]
    #eq := eq && result[0,4] = @[dst, 4]
    eq := eq && @[dst+4, 4] = 0x80000000

    before[0, 32] := result[0, 32]
    mask[0, 8] := 0x3fffffffffffffff
    before[24, 8] := mask[0, 8] & before[24, 8]

    after[0, 32] := result[0, 32] - q[0, 32]
    after[24, 8] := mask[0, 8] & after[24, 8]
    if before[0,32] >= q[0, 32] then
        eq := eq && after[0,32] = @[dst+8, 32]
    else
        eq := eq && before[0,32] = @[dst+8, 32]
    end   
  end

  assert eq
  halt

end

explore all